:PROPERTIES:
:ID:       0997b060-ee05-458e-beed-3494675c879d
:END:
#+title: ðŸ‘¾ programming

Hey! These are some snippets of various languages that can be run straight out of org mode.

connected to a lot of these things is my [[id:058bef0b-aba6-4ac6-b4ae-b3c7b7e22040][goku (karabiner) config]].
* Who am i
#+begin_src bash
whoami
#+end_src

#+RESULTS:
: ketanagrawal
* Rust
In rust, you can create a tuple by =let tuple = (x0, x1, x2)= and access them by =tuple.0=, =tuple.1=, and =tuple.2=. For example:
#+begin_src rust
let tuple = (1, "hello");
assert_eq!(tuple.0, 1);
assert_eq!(tuple.1, "hello");
struct Point { x: f32, y: f32 };
#+end_src
* Applescript
Applescript to switch the current tab from Safari => Chrome:
#+begin_src apples
tell application "Safari"
    set theURL to URL of current tab of window 1
    tell application "Google Chrome" to open location theURL
end tell
#+end_src

#+RESULTS:
* Emacs Lisp
#+begin_src elisp
(message "Lovely %s we're having, isn't it?"
    (format-time-string "%A"))
#+end_src

#+RESULTS:
: Lovely Monday weâ€™re having, isnâ€™t it?

* Python
#+begin_src python :results output
import numpy as np

def fibonacci_squares_arr(n):
    if n < 0:
        raise Exception('nope.')
    if n == 0:
        return np.array([])
    if n == 1:
        return np.array([[n]])
    else:
        old = fibonacci_squares_arr(n - 1)
        side_len = max(old.shape)
        nxt = np.full((side_len, side_len), n)
        elems = (old, nxt) if n // 2 % 2 == 0 else (nxt, old)
        return np.concatenate(elems, axis=int(n % 2 == 0))

def fibonacci_squares(n):
    arr = fibonacci_squares_arr(n)
    chars = list('ðŸŸ¥ðŸŸ«ðŸŸ¦ðŸŸ§ðŸŸ¨ðŸŸªðŸŸ©')
    fib_str = '\n'.join([''.join([chars[(elem - 1) % len(chars)]
                                  for elem in row]) for row in arr])
    return fib_str
print(fibonacci_squares(6))
#+end_src

#+RESULTS:
: ðŸŸªðŸŸªðŸŸªðŸŸªðŸŸªðŸŸªðŸŸªðŸŸªðŸŸ¦ðŸŸ¦ðŸŸ§ðŸŸ§ðŸŸ§
: ðŸŸªðŸŸªðŸŸªðŸŸªðŸŸªðŸŸªðŸŸªðŸŸªðŸŸ¦ðŸŸ¦ðŸŸ§ðŸŸ§ðŸŸ§
: ðŸŸªðŸŸªðŸŸªðŸŸªðŸŸªðŸŸªðŸŸªðŸŸªðŸŸ«ðŸŸ¥ðŸŸ§ðŸŸ§ðŸŸ§
: ðŸŸªðŸŸªðŸŸªðŸŸªðŸŸªðŸŸªðŸŸªðŸŸªðŸŸ¨ðŸŸ¨ðŸŸ¨ðŸŸ¨ðŸŸ¨
: ðŸŸªðŸŸªðŸŸªðŸŸªðŸŸªðŸŸªðŸŸªðŸŸªðŸŸ¨ðŸŸ¨ðŸŸ¨ðŸŸ¨ðŸŸ¨
: ðŸŸªðŸŸªðŸŸªðŸŸªðŸŸªðŸŸªðŸŸªðŸŸªðŸŸ¨ðŸŸ¨ðŸŸ¨ðŸŸ¨ðŸŸ¨
: ðŸŸªðŸŸªðŸŸªðŸŸªðŸŸªðŸŸªðŸŸªðŸŸªðŸŸ¨ðŸŸ¨ðŸŸ¨ðŸŸ¨ðŸŸ¨
: ðŸŸªðŸŸªðŸŸªðŸŸªðŸŸªðŸŸªðŸŸªðŸŸªðŸŸ¨ðŸŸ¨ðŸŸ¨ðŸŸ¨ðŸŸ¨

#+begin_src python :results output :session foo
y = 2
#+end_src

#+RESULTS:

#+begin_src python :results output :session foo
print(y)
#+end_src

#+RESULTS:
: 2
